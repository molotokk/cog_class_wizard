/*[[[cog
    import sys
    sys.path.append('../src')
    import cogflect as cw

    #fields = [
    #  ["name",  "value",     "type",    "tags",            "metadata"]
    #  ,["FOO",   15,          "double",  ["fuzzy"],         cf.typedef("float", "serial_type")],
    #  ["BAR",   23,          "double",  ["fuzzy", "ugly"]],
    #  ["BUZZ",  42,          "int",     None,              cf.const("unsigned", "bazz", 3)]
    #]

    properties = [
    [ "type", "name", "value"]
    ,[ "std::wstring", "parameterSetFile",  None    ]
    ,["cv::Point", "offset" ,   None    ]
    ]

    public_methods = [
      ["type", "name",  "value",    "tags",  "metadata"]
      ,["bool", "init",  "",    "",  ""]
      ,["bool", "process",  "const cv::InputArray src1, const cv::InputArray src2, cv::OutputArray dst",    "",  ""]
    ]

    private_methods = [
      ["type", "name",  "value",    "tags",  "metadata"]
      ,["bool", "loadParameters",  "const std::wstring& filePath",    "",  ""]
      ,["bool", "saveParameters",  "const std::wstring& filePath",    "",  ""]
    ]

    protected_methods = [
      ["type", "name",  "value",    "tags",  "metadata"]
      ,["void", "performPanSharpening",  "cv::InputArray visibleMono, cv::InputArray thermal, cv::OutputArray dst, cv::Point offset = cv::Point(0, 0)",    "",  ""]
      ,["void", "translateImage",  "cv::InputArray src, cv::OutputArray dst, cv::Point offset = cv::Point(0, 0)",    "",  ""]
      ,["void", "zoomImage",  "cv::InputArray src, cv::OutputArray dst, double factor = 1",    "",  ""]
    ]

    private_data = [
      ["type", "name",  "value",    "tags",  "metadata"]
      ,["int", "stereoProcessorType",  0,    "",  ""]
      ,["double", "factor",  1,    "",  ""]
      ,["std::wstring", "parameterSetFile",  "stereoprocessor_parameters.yml",    "property",  ""]
      ,["cv::Point", "offset",  1,    "property",  ""]
    ]

    cw.CppClass("PanSharpener", properties)



  ]]]*/
#ifndef PANSHARPENER_H
#define PANSHARPENER_H



class PanSharpener
{
	public:		// Property get / set
		void setParameterSetFile(const std::wstring value);
		std::wstring	parameterSetFile() const;
		void setOffset(const cv::Point value);
		cv::Point	offset() const;
};

#endif PANSHARPENER_H
//[[[end]]]
